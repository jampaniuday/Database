
select * from user_login
where pid =2 and login_time > "2016-11-11 11:11:11";


182. Duplicate Emails Easy

SQL Schema
Write a SQL query to find all duplicate emails in a table named Person.

+----+---------+
| Id | Email   |
+----+---------+
| 1  | a@b.com |
| 2  | c@d.com |
| 3  | a@b.com |
+----+---------+
For example, your query should return the following for the above table:

+---------+
| Email   |
+---------+
| a@b.com |
+---------+
Note: All emails are in lowercase.

Accepted
86,616
Submissions
172,879

CREATE TABLE LIKES (NAME varchar(14), FRUITS varchar(14));


   insert into LIKES values ('1','a@b.com');
   insert into LIKES values ('2','c@d.com');
   insert into LIKES values ('3','a@b.com');
   
   
   insert into LIKES values ('Piglet','apple');
   insert into LIKES values ('Piglet','pear');
   insert into LIKES values ('Piglet','raspberry');
   insert into LIKES values ('Winnie','apple');
   insert into LIKES values ('Winnie','pear');
   insert into LIKES values ('Kanga','apple');
   insert into LIKES values ('Tiger','apple');
   insert into LIKES values ('Tiger','pear');

commit;
-- grant select on LIKES to public;
-- drop table LIKES; 


mysql> UPDATE World.likesSET FRUITS = 'a@b.com' WHERE NAME = 3;
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version
for the right syntax to use near '= 'a@b.com' WHERE NAME = 3' at line 1

mysql> UPDATE World.likes SET FRUITS = 'a@b.com' WHERE NAME = 3;
Query OK, 1 row affected (0.12 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> select * from world.likes;
+------+---------+
| NAME | FRUITS  |
+------+---------+
| 1    | a@b.com |
| 2    | c@d.com |
| 3    | a@b.com |
+------+---------+
3 rows in set (0.00 sec)

mysql>
mysql> SELECT FRUITS FROM world.likes GROUP BY FRUITS HAVING (COUNT(*) > 1);
+---------+
| FRUITS  |
+---------+
| a@b.com |
+---------+
1 row in set (0.00 sec)


 SELECT FRUITS FROM world.likes GROUP BY FRUITS HAVING (COUNT(*) > 0);
 mysql>  SELECT FRUITS FROM world.likes GROUP BY FRUITS HAVING (COUNT(*) > 0);
+---------+
| FRUITS  |
+---------+
| a@b.com |
| c@d.com |
+---------+
2 rows in set (0.00 sec)


mysql> select distinct fruits from world.likes;
+---------+
| fruits  |
+---------+
| a@b.com |
| c@d.com |
+---------+
2 rows in set (0.00 sec)


mysql>
Duplicate Emails 查询出重复的邮件 

https://www.w3schools.com/sql/sql_update.asp
数据库的模式设计
建立数据库
插入数据到数据库
基本查询语句
分组查询
Having语句使用


mysql> select * from world.classes where name = 'English';
+---------+----------+
| name    | class_id |
+---------+----------+
| English |        1 |
+---------+----------+
1 row in set (0.00 sec)

mysql> describe world.classes;
+----------+------------------+------+-----+---------+----------------+
| Field    | Type             | Null | Key | Default | Extra          |
+----------+------------------+------+-----+---------+----------------+
| name     | varchar(30)      | NO   |     | NULL    |                |
| class_id | int(10) unsigned | NO   | PRI | NULL    | auto_increment |
+----------+------------------+------+-----+---------+----------------+
2 rows in set (0.01 sec)


mysql> DELETE a FROM LIKES AS a INNER JOIN LIKES AS b WHERE a.FRUITS = b.FRUITS AND a.NAME > b.NAME;
Query OK, 1 row affected (0.03 sec)

mysql> select * from world.likes;
+------+---------+
| NAME | FRUITS  |
+------+---------+
| 1    | a@b.com |
| 2    | c@d.com |
+------+---------+
2 rows in set (0.00 sec)

mysql>

Create table If Not Exists Employee2 (Id int, Name varchar(255), Salary int, ManagerId int);
Truncate table Employee2;
insert into Employee2 (Id, Name, Salary, ManagerId) values ('1', 'Joe', '70000', '3');
insert into Employee2 (Id, Name, Salary, ManagerId) values ('2', 'Henry', '80000', '4');
insert into Employee2 (Id, Name, Salary, ManagerId) values ('3', 'Sam', '60000', 'None');
insert into Employee2 (Id, Name, Salary, ManagerId) values ('4', 'Max', '90000', 'None');

mysql>  select * from  world.Employee2 ;
+------+-------+--------+-----------+
| Id   | Name  | Salary | ManagerId |
+------+-------+--------+-----------+
|    1 | Joe   |  70000 |         3 |
|    2 | Henry |  80000 |         4 |
+------+-------+--------+-----------+
2 rows in set (0.00 sec)

mysql>
insert into Employee2 (Id, Name, Salary, ManagerId) values ('3', 'Sam', '60000', '0');
insert into Employee2 (Id, Name, Salary, ManagerId) values ('4', 'Max', '90000', '0');

mysql> select * from  world.Employee2 ;
+------+-------+--------+-----------+
| Id   | Name  | Salary | ManagerId |
+------+-------+--------+-----------+
|    1 | Joe   |  70000 |         3 |
|    2 | Henry |  80000 |         4 |
|    3 | Sam   |  60000 |         0 |
|    4 | Max   |  90000 |         0 |
+------+-------+--------+-----------+
4 rows in set (0.00 sec)


SELECT a.Name
FROM Employee2 a, Employee2 b
WHERE a.ManagerId = b.Id AND a.Salary > b.Salary;

mysql> SELECT a.Name FROM Employee2 a, Employee2 b WHERE a.ManagerId = b.Id AND a.Salary > b.Salary;
+------+
| Name |
+------+
| Joe  |
+------+
1 row in set (0.00 sec)


181. Employees Earning More Than Their Managers  Easy

SQL Schema
The Employee table holds all employees including their managers. Every employee has an Id, and there is also a column for the manager Id.

+----+-------+--------+-----------+
| Id | Name  | Salary | ManagerId |
+----+-------+--------+-----------+
| 1  | Joe   | 70000  | 3         |
| 2  | Henry | 80000  | 4         |
| 3  | Sam   | 60000  | NULL      |
| 4  | Max   | 90000  | NULL      |
+----+-------+--------+-----------+
Given the Employee table, write a SQL query that finds out employees who earn more than their managers. 
For the above table, Joe is the only employee who earns more than his manager.

+----------+
| Employee |
+----------+
| Joe      |
+----------+

Accepted      80,581
Submissions  188,288



mysql> SELECT * FROM Employee2 a natural join Employee2 b
    -> ;
+------+-------+--------+-----------+
| Id   | Name  | Salary | ManagerId |
+------+-------+--------+-----------+
|    1 | Joe   |  70000 |         3 |
|    2 | Henry |  80000 |         4 |
|    3 | Sam   |  60000 |         0 |
|    4 | Max   |  90000 |         0 |
+------+-------+--------+-----------+
4 rows in set (0.00 sec)

mysql> SELECT * FROM Employee2 a join Employee2 b
    -> ;
+------+-------+--------+-----------+------+-------+--------+-----------+
| Id   | Name  | Salary | ManagerId | Id   | Name  | Salary | ManagerId |
+------+-------+--------+-----------+------+-------+--------+-----------+
|    1 | Joe   |  70000 |         3 |    1 | Joe   |  70000 |         3 |
|    2 | Henry |  80000 |         4 |    1 | Joe   |  70000 |         3 |
|    3 | Sam   |  60000 |         0 |    1 | Joe   |  70000 |         3 |
|    4 | Max   |  90000 |         0 |    1 | Joe   |  70000 |         3 |
|    1 | Joe   |  70000 |         3 |    2 | Henry |  80000 |         4 |
|    2 | Henry |  80000 |         4 |    2 | Henry |  80000 |         4 |
|    3 | Sam   |  60000 |         0 |    2 | Henry |  80000 |         4 |
|    4 | Max   |  90000 |         0 |    2 | Henry |  80000 |         4 |
|    1 | Joe   |  70000 |         3 |    3 | Sam   |  60000 |         0 |
|    2 | Henry |  80000 |         4 |    3 | Sam   |  60000 |         0 |
|    3 | Sam   |  60000 |         0 |    3 | Sam   |  60000 |         0 |
|    4 | Max   |  90000 |         0 |    3 | Sam   |  60000 |         0 |
|    1 | Joe   |  70000 |         3 |    4 | Max   |  90000 |         0 |
|    2 | Henry |  80000 |         4 |    4 | Max   |  90000 |         0 |
|    3 | Sam   |  60000 |         0 |    4 | Max   |  90000 |         0 |
|    4 | Max   |  90000 |         0 |    4 | Max   |  90000 |         0 |
+------+-------+--------+-----------+------+-------+--------+-----------+
16 rows in set (0.00 sec)

mysql> SELECT * FROM Employee2 a join Employee2 b WHERE a.ManagerId = b.Id AND a.Salary > b.Salary;
+------+------+--------+-----------+------+------+--------+-----------+
| Id   | Name | Salary | ManagerId | Id   | Name | Salary | ManagerId |
+------+------+--------+-----------+------+------+--------+-----------+
|    1 | Joe  |  70000 |         3 |    3 | Sam  |  60000 |         0 |
+------+------+--------+-----------+------+------+--------+-----------+
1 row in set (0.00 sec)

 
mysql> SELECT a.name FROM Employee2 a join Employee2 b WHERE a.ManagerId = b.Id AND a.Salary > b.Salary;
+------+
| name |
+------+
| Joe  |
+------+
1 row in set (0.00 sec)

mysql> SELECT a.name, b.name FROM Employee2 a join Employee2 b WHERE a.ManagerId = b.Id AND a.Salary > b.Salary;
+------+------+
| name | name |
+------+------+
| Joe  | Sam  |
+------+------+
1 row in set (0.00 sec)

mysql>
mysql> SELECT a.name, b.name as 'manager name' FROM Employee2 a join Employee2 b WHERE a.ManagerId = b.Id AND a.Salary > b.Salary;
+------+--------------+
| name | manager name |
+------+--------------+
| Joe  | Sam          |
+------+--------------+
1 row in set (0.00 sec)

mysql> SELECT a.name as 'employee name', b.name as 'manager name' FROM Employee2 a join Employee2 b 
       WHERE a.ManagerId = b.Id AND a.Salary > b.Salary;
+---------------+--------------+
| employee name | manager name |
+---------------+--------------+
| Joe           | Sam          |
+---------------+--------------+
1 row in set (0.00 sec)


mysql> SELECT * FROM Employee2 a join Employee2 b WHERE a.ManagerId = b.Id and a.Salary > b.Salary;
+------+------+--------+-----------+------+------+--------+-----------+
| Id   | Name | Salary | ManagerId | Id   | Name | Salary | ManagerId |
+------+------+--------+-----------+------+------+--------+-----------+
|    1 | Joe  |  70000 |         3 |    3 | Sam  |  60000 |         0 |
+------+------+--------+-----------+------+------+--------+-----------+
1 row in set (0.00 sec)

mysql> SELECT * FROM Employee2 a, Employee2 b WHERE a.ManagerId = b.Id and a.Salary > b.Salary;
+------+------+--------+-----------+------+------+--------+-----------+
| Id   | Name | Salary | ManagerId | Id   | Name | Salary | ManagerId |
+------+------+--------+-----------+------+------+--------+-----------+
|    1 | Joe  |  70000 |         3 |    3 | Sam  |  60000 |         0 |
+------+------+--------+-----------+------+------+--------+-----------+
1 row in set (0.00 sec)
