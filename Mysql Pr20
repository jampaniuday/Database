
select * from user_login
where pid =2 and login_time > "2016-11-11 11:11:11";


182. Duplicate Emails Easy

SQL Schema
Write a SQL query to find all duplicate emails in a table named Person.

+----+---------+
| Id | Email   |
+----+---------+
| 1  | a@b.com |
| 2  | c@d.com |
| 3  | a@b.com |
+----+---------+
For example, your query should return the following for the above table:

+---------+
| Email   |
+---------+
| a@b.com |
+---------+
Note: All emails are in lowercase.

Accepted
86,616
Submissions
172,879

CREATE TABLE LIKES (NAME varchar(14), FRUITS varchar(14));


   insert into LIKES values ('1','a@b.com');
   insert into LIKES values ('2','c@d.com');
   insert into LIKES values ('3','a@b.com');
   
   
   insert into LIKES values ('Piglet','apple');
   insert into LIKES values ('Piglet','pear');
   insert into LIKES values ('Piglet','raspberry');
   insert into LIKES values ('Winnie','apple');
   insert into LIKES values ('Winnie','pear');
   insert into LIKES values ('Kanga','apple');
   insert into LIKES values ('Tiger','apple');
   insert into LIKES values ('Tiger','pear');

commit;
-- grant select on LIKES to public;
-- drop table LIKES; 


mysql> UPDATE World.likesSET FRUITS = 'a@b.com' WHERE NAME = 3;
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version
for the right syntax to use near '= 'a@b.com' WHERE NAME = 3' at line 1

mysql> UPDATE World.likes SET FRUITS = 'a@b.com' WHERE NAME = 3;
Query OK, 1 row affected (0.12 sec)
Rows matched: 1  Changed: 1  Warnings: 0

mysql> select * from world.likes;
+------+---------+
| NAME | FRUITS  |
+------+---------+
| 1    | a@b.com |
| 2    | c@d.com |
| 3    | a@b.com |
+------+---------+
3 rows in set (0.00 sec)

mysql>
mysql> SELECT FRUITS FROM world.likes GROUP BY FRUITS HAVING (COUNT(*) > 1);
+---------+
| FRUITS  |
+---------+
| a@b.com |
+---------+
1 row in set (0.00 sec)


 SELECT FRUITS FROM world.likes GROUP BY FRUITS HAVING (COUNT(*) > 0);
 mysql>  SELECT FRUITS FROM world.likes GROUP BY FRUITS HAVING (COUNT(*) > 0);
+---------+
| FRUITS  |
+---------+
| a@b.com |
| c@d.com |
+---------+
2 rows in set (0.00 sec)


mysql> select distinct fruits from world.likes;
+---------+
| fruits  |
+---------+
| a@b.com |
| c@d.com |
+---------+
2 rows in set (0.00 sec)


mysql>
Duplicate Emails 查询出重复的邮件 

https://www.w3schools.com/sql/sql_update.asp
数据库的模式设计
建立数据库
插入数据到数据库
基本查询语句
分组查询
Having语句使用


mysql> select * from world.classes where name = 'English';
+---------+----------+
| name    | class_id |
+---------+----------+
| English |        1 |
+---------+----------+
1 row in set (0.00 sec)

mysql> describe world.classes;
+----------+------------------+------+-----+---------+----------------+
| Field    | Type             | Null | Key | Default | Extra          |
+----------+------------------+------+-----+---------+----------------+
| name     | varchar(30)      | NO   |     | NULL    |                |
| class_id | int(10) unsigned | NO   | PRI | NULL    | auto_increment |
+----------+------------------+------+-----+---------+----------------+
2 rows in set (0.01 sec)


mysql> DELETE a FROM LIKES AS a INNER JOIN LIKES AS b WHERE a.FRUITS = b.FRUITS AND a.NAME > b.NAME;
Query OK, 1 row affected (0.03 sec)

mysql> select * from world.likes;
+------+---------+
| NAME | FRUITS  |
+------+---------+
| 1    | a@b.com |
| 2    | c@d.com |
+------+---------+
2 rows in set (0.00 sec)

mysql>

Create table If Not Exists Employee2 (Id int, Name varchar(255), Salary int, ManagerId int);
Truncate table Employee2;
insert into Employee2 (Id, Name, Salary, ManagerId) values ('1', 'Joe', '70000', '3');
insert into Employee2 (Id, Name, Salary, ManagerId) values ('2', 'Henry', '80000', '4');
insert into Employee2 (Id, Name, Salary, ManagerId) values ('3', 'Sam', '60000', 'None');
insert into Employee2 (Id, Name, Salary, ManagerId) values ('4', 'Max', '90000', 'None');

mysql>  select * from  world.Employee2 ;
+------+-------+--------+-----------+
| Id   | Name  | Salary | ManagerId |
+------+-------+--------+-----------+
|    1 | Joe   |  70000 |         3 |
|    2 | Henry |  80000 |         4 |
+------+-------+--------+-----------+
2 rows in set (0.00 sec)

mysql>
insert into Employee2 (Id, Name, Salary, ManagerId) values ('3', 'Sam', '60000', '0');
insert into Employee2 (Id, Name, Salary, ManagerId) values ('4', 'Max', '90000', '0');

mysql> select * from  world.Employee2 ;
+------+-------+--------+-----------+
| Id   | Name  | Salary | ManagerId |
+------+-------+--------+-----------+
|    1 | Joe   |  70000 |         3 |
|    2 | Henry |  80000 |         4 |
|    3 | Sam   |  60000 |         0 |
|    4 | Max   |  90000 |         0 |
+------+-------+--------+-----------+
4 rows in set (0.00 sec)


SELECT a.Name
FROM Employee2 a, Employee2 b
WHERE a.ManagerId = b.Id AND a.Salary > b.Salary;

mysql> SELECT a.Name FROM Employee2 a, Employee2 b WHERE a.ManagerId = b.Id AND a.Salary > b.Salary;
+------+
| Name |
+------+
| Joe  |
+------+
1 row in set (0.00 sec)


181. Employees Earning More Than Their Managers  Easy

SQL Schema
The Employee table holds all employees including their managers. Every employee has an Id, and there is also a column for the manager Id.

+----+-------+--------+-----------+
| Id | Name  | Salary | ManagerId |
+----+-------+--------+-----------+
| 1  | Joe   | 70000  | 3         |
| 2  | Henry | 80000  | 4         |
| 3  | Sam   | 60000  | NULL      |
| 4  | Max   | 90000  | NULL      |
+----+-------+--------+-----------+
Given the Employee table, write a SQL query that finds out employees who earn more than their managers. 
For the above table, Joe is the only employee who earns more than his manager.

+----------+
| Employee |
+----------+
| Joe      |
+----------+

Accepted      80,581
Submissions  188,288



mysql> SELECT * FROM Employee2 a natural join Employee2 b
    -> ;
+------+-------+--------+-----------+
| Id   | Name  | Salary | ManagerId |
+------+-------+--------+-----------+
|    1 | Joe   |  70000 |         3 |
|    2 | Henry |  80000 |         4 |
|    3 | Sam   |  60000 |         0 |
|    4 | Max   |  90000 |         0 |
+------+-------+--------+-----------+
4 rows in set (0.00 sec)

mysql> SELECT * FROM Employee2 a join Employee2 b
    -> ;
+------+-------+--------+-----------+------+-------+--------+-----------+
| Id   | Name  | Salary | ManagerId | Id   | Name  | Salary | ManagerId |
+------+-------+--------+-----------+------+-------+--------+-----------+
|    1 | Joe   |  70000 |         3 |    1 | Joe   |  70000 |         3 |
|    2 | Henry |  80000 |         4 |    1 | Joe   |  70000 |         3 |
|    3 | Sam   |  60000 |         0 |    1 | Joe   |  70000 |         3 |
|    4 | Max   |  90000 |         0 |    1 | Joe   |  70000 |         3 |
|    1 | Joe   |  70000 |         3 |    2 | Henry |  80000 |         4 |
|    2 | Henry |  80000 |         4 |    2 | Henry |  80000 |         4 |
|    3 | Sam   |  60000 |         0 |    2 | Henry |  80000 |         4 |
|    4 | Max   |  90000 |         0 |    2 | Henry |  80000 |         4 |
|    1 | Joe   |  70000 |         3 |    3 | Sam   |  60000 |         0 |
|    2 | Henry |  80000 |         4 |    3 | Sam   |  60000 |         0 |
|    3 | Sam   |  60000 |         0 |    3 | Sam   |  60000 |         0 |
|    4 | Max   |  90000 |         0 |    3 | Sam   |  60000 |         0 |
|    1 | Joe   |  70000 |         3 |    4 | Max   |  90000 |         0 |
|    2 | Henry |  80000 |         4 |    4 | Max   |  90000 |         0 |
|    3 | Sam   |  60000 |         0 |    4 | Max   |  90000 |         0 |
|    4 | Max   |  90000 |         0 |    4 | Max   |  90000 |         0 |
+------+-------+--------+-----------+------+-------+--------+-----------+
16 rows in set (0.00 sec)

mysql> SELECT * FROM Employee2 a join Employee2 b WHERE a.ManagerId = b.Id AND a.Salary > b.Salary;
+------+------+--------+-----------+------+------+--------+-----------+
| Id   | Name | Salary | ManagerId | Id   | Name | Salary | ManagerId |
+------+------+--------+-----------+------+------+--------+-----------+
|    1 | Joe  |  70000 |         3 |    3 | Sam  |  60000 |         0 |
+------+------+--------+-----------+------+------+--------+-----------+
1 row in set (0.00 sec)

 
mysql> SELECT a.name FROM Employee2 a join Employee2 b WHERE a.ManagerId = b.Id AND a.Salary > b.Salary;
+------+
| name |
+------+
| Joe  |
+------+
1 row in set (0.00 sec)

mysql> SELECT a.name, b.name FROM Employee2 a join Employee2 b WHERE a.ManagerId = b.Id AND a.Salary > b.Salary;
+------+------+
| name | name |
+------+------+
| Joe  | Sam  |
+------+------+
1 row in set (0.00 sec)

mysql>
mysql> SELECT a.name, b.name as 'manager name' FROM Employee2 a join Employee2 b WHERE a.ManagerId = b.Id AND a.Salary > b.Salary;
+------+--------------+
| name | manager name |
+------+--------------+
| Joe  | Sam          |
+------+--------------+
1 row in set (0.00 sec)

mysql> SELECT a.name as 'employee name', b.name as 'manager name' FROM Employee2 a join Employee2 b 
       WHERE a.ManagerId = b.Id AND a.Salary > b.Salary;
+---------------+--------------+
| employee name | manager name |
+---------------+--------------+
| Joe           | Sam          |
+---------------+--------------+
1 row in set (0.00 sec)


mysql> SELECT * FROM Employee2 a join Employee2 b WHERE a.ManagerId = b.Id and a.Salary > b.Salary;
+------+------+--------+-----------+------+------+--------+-----------+
| Id   | Name | Salary | ManagerId | Id   | Name | Salary | ManagerId |
+------+------+--------+-----------+------+------+--------+-----------+
|    1 | Joe  |  70000 |         3 |    3 | Sam  |  60000 |         0 |
+------+------+--------+-----------+------+------+--------+-----------+
1 row in set (0.00 sec)

mysql> SELECT * FROM Employee2 a, Employee2 b WHERE a.ManagerId = b.Id and a.Salary > b.Salary;
+------+------+--------+-----------+------+------+--------+-----------+
| Id   | Name | Salary | ManagerId | Id   | Name | Salary | ManagerId |
+------+------+--------+-----------+------+------+--------+-----------+
|    1 | Joe  |  70000 |         3 |    3 | Sam  |  60000 |         0 |
+------+------+--------+-----------+------+------+--------+-----------+
1 row in set (0.00 sec)


Workbench:
SELECT a.Name
FROM Employee2 a, Employee2 b
WHERE a.ManagerId = b.Id AND a.Salary > b.Salary;

mysql> SELECT a.Name FROM Employee2 a, Employee2 b WHERE a.ManagerId = b.Id AND a.Salary > b.Salary;
+------+
| Name |
+------+
| Joe  |
+------+
1 row in set (0.00 sec)




Create table If Not Exists Employee3 (Id int, Salary int);
Truncate table Employee3;
insert into Employee3 (Id, Salary) values ('1', '100');
insert into Employee3 (Id, Salary) values ('2', '200');
insert into Employee3 (Id, Salary) values ('3', '300');


Second Highest Salary  Easy
 
SQL Schema
Write a SQL query to get the second highest salary from the Employee table.

+----+--------+
| Id | Salary |
+----+--------+
| 1  | 100    |
| 2  | 200    |
| 3  | 300    |
+----+--------+
For example, given the above Employee table, the query should return 200 as the second highest salary. 
If there is no second highest salary, then the query should return null.

+---------------------+
| SecondHighestSalary |
+---------------------+
| 200                 |
+---------------------+
Accepted      96,113  
Submissions  385,486

# leetcode 176 Second Highest Salary

SELECT MAX(Salary)
FROM Employee3
WHERE Salary < (SELECT MAX(Salary) FROM Employee3);

# 比最大值小的所有值当中的最大值 
mysql> SELECT MAX(Salary) FROM Employee3 WHERE Salary < (SELECT MAX(Salary) FROM Employee3);
+-------------+
| MAX(Salary) |
+-------------+
|         200 |
+-------------+
1 row in set (0.01 sec)



Create table If Not Exists Weather (Id int, RecordDate date, Temperature int);
Truncate table Weather;
insert into Weather (Id, RecordDate, Temperature) values ('1', '2015-01-01', '10');
insert into Weather (Id, RecordDate, Temperature) values ('2', '2015-01-02', '25');
insert into Weather (Id, RecordDate, Temperature) values ('3', '2015-01-03', '20');
insert into Weather (Id, RecordDate, Temperature) values ('4', '2015-01-04', '30');

mysql> select * from weather;
+------+------------+-------------+
| Id   | RecordDate | Temperature |
+------+------------+-------------+
|    1 | 2015-01-01 |          10 |
|    2 | 2015-01-02 |          25 |
|    3 | 2015-01-03 |          20 |
|    4 | 2015-01-04 |          30 |
+------+------------+-------------+
4 rows in set (0.00 sec)

mysql> SELECT a.Id FROM weather a inner join weather b ON TO_DAYS(a.RecordDate) = TO_DAYS(b.RecordDate) + 1 AND a.Temperature > b.Temperature;
+------+
| Id   |
+------+
|    2 |
|    4 |
+------+
2 rows in set (0.00 sec)

Rising Temperature  Easy

SQL Schema
Given a Weather table, write a SQL query to find all dates' Ids with higher temperature compared to its previous (yesterday's) dates.

+---------+------------------+------------------+
| Id(INT) | RecordDate(DATE) | Temperature(INT) |
+---------+------------------+------------------+
|       1 |       2015-01-01 |               10 |
|       2 |       2015-01-02 |               25 |
|       3 |       2015-01-03 |               20 |
|       4 |       2015-01-04 |               30 |
+---------+------------------+------------------+
For example, return the following Ids for the above Weather table:

+----+
| Id |
+----+
|  2 |
|  4 |
+----+
Accepted 60,180
Submissions 185,150


mysql>  SELECT * FROM weather a join weather b;
+------+------------+-------------+------+------------+-------------+
| Id   | RecordDate | Temperature | Id   | RecordDate | Temperature |
+------+------------+-------------+------+------------+-------------+
|    1 | 2015-01-01 |          10 |    1 | 2015-01-01 |          10 |
|    2 | 2015-01-02 |          25 |    1 | 2015-01-01 |          10 |
|    3 | 2015-01-03 |          20 |    1 | 2015-01-01 |          10 |
|    4 | 2015-01-04 |          30 |    1 | 2015-01-01 |          10 |
|    1 | 2015-01-01 |          10 |    2 | 2015-01-02 |          25 |
|    2 | 2015-01-02 |          25 |    2 | 2015-01-02 |          25 |
|    3 | 2015-01-03 |          20 |    2 | 2015-01-02 |          25 |
|    4 | 2015-01-04 |          30 |    2 | 2015-01-02 |          25 |
|    1 | 2015-01-01 |          10 |    3 | 2015-01-03 |          20 |
|    2 | 2015-01-02 |          25 |    3 | 2015-01-03 |          20 |
|    3 | 2015-01-03 |          20 |    3 | 2015-01-03 |          20 |
|    4 | 2015-01-04 |          30 |    3 | 2015-01-03 |          20 |
|    1 | 2015-01-01 |          10 |    4 | 2015-01-04 |          30 |
|    2 | 2015-01-02 |          25 |    4 | 2015-01-04 |          30 |
|    3 | 2015-01-03 |          20 |    4 | 2015-01-04 |          30 |
|    4 | 2015-01-04 |          30 |    4 | 2015-01-04 |          30 |
+------+------------+-------------+------+------------+-------------+
16 rows in set (0.00 sec)

mysql>  SELECT * FROM weather a natural join weather b;
+------+------------+-------------+
| Id   | RecordDate | Temperature |
+------+------------+-------------+
|    1 | 2015-01-01 |          10 |
|    2 | 2015-01-02 |          25 |
|    3 | 2015-01-03 |          20 |
|    4 | 2015-01-04 |          30 |
+------+------------+-------------+
4 rows in set (0.00 sec)


insert into weather (Id, RecordDate, Temperature) values ('5', '2018-11-21', '17');
insert into weather (Id, RecordDate, Temperature) values ('6', '2018-11-22', '22');
insert into weather (Id, RecordDate, Temperature) values ('7', '2018-11-23', '20');
insert into weather (Id, RecordDate, Temperature) values ('8', '2018-11-24', '18');

mysql> select * from weather;
+------+------------+-------------+
| Id   | RecordDate | Temperature |
+------+------------+-------------+
|    1 | 2015-01-01 |          10 |
|    2 | 2015-01-02 |          25 |
|    3 | 2015-01-03 |          20 |
|    4 | 2015-01-04 |          30 |
|    5 | 2018-11-21 |          17 |
|    6 | 2018-11-22 |          22 |
|    7 | 2018-11-23 |          20 |
|    8 | 2018-11-24 |          18 |
+------+------------+-------------+
8 rows in set (0.00 sec)

mysql>
mysql> SELECT a.Id FROM weather a inner join weather b ON TO_DAYS(a.RecordDate) = TO_DAYS(b.RecordDate) + 1 AND a.Temperature > b.Temperature;
+------+
| Id   |
+------+
|    2 |
|    4 |
|    6 |
+------+
3 rows in set (0.00 sec)


Create table If Not Exists Customers (Id int, Name varchar(255));
Create table If Not Exists Orders (Id int, CustomerId int);
Truncate table Customers;
insert into Customers (Id, Name) values ('1', 'Joe');
insert into Customers (Id, Name) values ('2', 'Henry');
insert into Customers (Id, Name) values ('3', 'Sam');
insert into Customers (Id, Name) values ('4', 'Max');
Truncate table Orders;
insert into Orders (Id, CustomerId) values ('1', '3');
insert into Orders (Id, CustomerId) values ('2', '1');


mysql> select * from Customers;
+------+-------+
| Id   | Name  |
+------+-------+
|    1 | Joe   |
|    2 | Henry |
|    3 | Sam   |
|    4 | Max   |
+------+-------+
4 rows in set (0.00 sec)

mysql> select * from orders;
+------+------------+
| Id   | CustomerId |
+------+------------+
|    1 |          3 |
|    2 |          1 |
+------+------------+
2 rows in set (0.00 sec)

mysql>
SELECT * FROM Customers
WHERE Customers.id NOT IN (SELECT Orders.CustomerId FROM Orders);

mysql> SELECT * FROM Customers WHERE Customers.id NOT IN (SELECT Orders.CustomerId FROM Orders);
+------+-------+
| Id   | Name  |
+------+-------+
|    2 | Henry |
|    4 | Max   |
+------+-------+


mysql> SELECT * FROM Customers, orders WHERE Customers.id = orders.CustomerId;
+------+------+------+------------+
| Id   | Name | Id   | CustomerId |
+------+------+------+------------+
|    1 | Joe  |    2 |          1 |
|    3 | Sam  |    1 |          3 |
+------+------+------+------------+
2 rows in set (0.00 sec)

mysql> SELECT * FROM Customers, orders WHERE Customers.id != orders.CustomerId;
+------+-------+------+------------+
| Id   | Name  | Id   | CustomerId |
+------+-------+------+------------+
|    1 | Joe   |    1 |          3 |
|    2 | Henry |    1 |          3 |
|    2 | Henry |    2 |          1 |
|    3 | Sam   |    2 |          1 |
|    4 | Max   |    1 |          3 |
|    4 | Max   |    2 |          1 |
+------+-------+------+------------+
6 rows in set (0.00 sec)


mysql> SELECT Name AS Customers FROM Customers AS c LEFT JOIN Orders AS o ON c.Id = o.CustomerId;
+-----------+
| Customers |
+-----------+
| Sam       |
| Joe       |
| Henry     |
| Max       |
+-----------+
4 rows in set (0.00 sec)

mysql> SELECT Name, o.Id AS Customers FROM Customers AS c LEFT JOIN Orders AS o ON c.Id = o.CustomerId;
+-------+-----------+
| Name  | Customers |
+-------+-----------+
| Sam   |         1 |
| Joe   |         2 |
| Henry |      NULL |
| Max   |      NULL |
+-------+-----------+
4 rows in set (0.00 sec)

mysql> SELECT * AS Customers FROM Customers AS c LEFT JOIN Orders AS o ON c.Id = o.CustomerId;
ERROR 1064 (42000): You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near 'AS Customers FROM Customers AS c LEFT JOIN Orders AS o ON c.Id = o.CustomerId' at line 1
mysql> SELECT Name, o.Id, c.Id, o.CustomerId AS Customers FROM Customers AS c LEFT JOIN Orders AS o ON c.Id = o.CustomerId;
+-------+------+------+-----------+
| Name  | Id   | Id   | Customers |
+-------+------+------+-----------+
| Sam   |    1 |    3 |         3 |
| Joe   |    2 |    1 |         1 |
| Henry | NULL |    2 |      NULL |
| Max   | NULL |    4 |      NULL |
+-------+------+------+-----------+
4 rows in set (0.00 sec)

mysql> SELECT Name, o.Id, c.Id, o.CustomerId FROM Customers AS c LEFT JOIN Orders AS o ON c.Id = o.CustomerId;
+-------+------+------+------------+
| Name  | Id   | Id   | CustomerId |
+-------+------+------+------------+
| Sam   |    1 |    3 |          3 |
| Joe   |    2 |    1 |          1 |
| Henry | NULL |    2 |       NULL |
| Max   | NULL |    4 |       NULL |
+-------+------+------+------------+
4 rows in set (0.00 sec)

MYSQL 交集 差集 并集

mysql> SELECT Name, o.Id, c.Id, o.CustomerId AS Customers FROM Customers AS c LEFT JOIN Orders AS o ON c.Id = o.CustomerId;
+-------+------+------+-----------+
| Name  | Id   | Id   | Customers |
+-------+------+------+-----------+
| Sam   |    1 |    3 |         3 |
| Joe   |    2 |    1 |         1 |
| Henry | NULL |    2 |      NULL |
| Max   | NULL |    4 |      NULL |
+-------+------+------+-----------+
4 rows in set (0.00 sec)

mysql> SELECT Name, o.Id, c.Id, o.CustomerId FROM Customers AS c LEFT JOIN Orders AS o ON c.Id = o.CustomerId;
+-------+------+------+------------+
| Name  | Id   | Id   | CustomerId |
+-------+------+------+------------+
| Sam   |    1 |    3 |          3 |
| Joe   |    2 |    1 |          1 |
| Henry | NULL |    2 |       NULL |
| Max   | NULL |    4 |       NULL |
+-------+------+------+------------+
4 rows in set (0.00 sec)

mysql> SELECT Name, o.Id, c.Id, o.CustomerId FROM Customers AS c LEFT JOIN Orders AS o ON c.Id = o.CustomerId and b.CustomerId is NULL;
ERROR 1054 (42S22): Unknown column 'b.CustomerId' in 'on clause'
mysql> SELECT Name, o.Id, c.Id, o.CustomerId FROM Customers AS c LEFT JOIN Orders AS o ON c.Id = o.CustomerId and b.CustomerId =NULL;
ERROR 1054 (42S22): Unknown column 'b.CustomerId' in 'on clause'
mysql> SELECT Name, o.Id, c.Id, o.CustomerId FROM Customers AS c LEFT JOIN Orders AS o ON c.Id = o.CustomerId and o.CustomerId is NULL;
+-------+------+------+------------+
| Name  | Id   | Id   | CustomerId |
+-------+------+------+------------+
| Joe   | NULL |    1 |       NULL |
| Henry | NULL |    2 |       NULL |
| Sam   | NULL |    3 |       NULL |
| Max   | NULL |    4 |       NULL |
+-------+------+------+------------+
4 rows in set (0.00 sec)

mysql> SELECT Name, o.Id, c.Id, o.CustomerId FROM Customers AS c LEFT JOIN Orders AS o ON c.Id = o.CustomerId where o.CustomerId is NULL;
+-------+------+------+------------+
| Name  | Id   | Id   | CustomerId |
+-------+------+------+------------+
| Henry | NULL |    2 |       NULL |
| Max   | NULL |    4 |       NULL |
+-------+------+------+------------+
2 rows in set (0.00 sec)

mysql> SELECT Name, o.Id, c.Id, o.CustomerId FROM Customers AS c LEFT JOIN Orders AS o ON c.Id = o.CustomerId;
+-------+------+------+------------+
| Name  | Id   | Id   | CustomerId |
+-------+------+------+------------+
| Sam   |    1 |    3 |          3 |
| Joe   |    2 |    1 |          1 |
| Henry | NULL |    2 |       NULL |
| Max   | NULL |    4 |       NULL |
+-------+------+------+------------+
4 rows in set (0.00 sec)

mysql> SELECT Name FROM Customers AS c LEFT JOIN Orders AS o ON c.Id = o.CustomerId where o.CustomerId is NULL;
+-------+
| Name  |
+-------+
| Henry |
| Max   |
+-------+
2 rows in set (0.00 sec)


SELECT Name AS Customers, o.Id  FROM Customers AS c
LEFT JOIN Orders AS o ON c.Id = o.CustomerId
WHERE o.Id IS NULL;

mysql> SELECT Name AS Customers, o.Id FROM Customers AS c LEFT JOIN Orders AS o ON c.Id = o.CustomerId WHERE o.Id IS NULL;
+-----------+------+
| Customers | Id   |
+-----------+------+
| Henry     | NULL |
| Max       | NULL |
+-----------+------+
2 rows in set (0.00 sec)

mysql>

Accepted     77,260

Submissions  190,243

mysql>
https://dev.mysql.com/doc/refman/8.0/en/join.html  // 连接语句语法使用

mysql> SELECT Name AS Customers, o.Id FROM Customers AS c JOIN Orders AS o ON c.Id = o.CustomerId ; # 等值连接
+-----------+------+
| Customers | Id   |
+-----------+------+
| Joe       |    2 |
| Sam       |    1 |
+-----------+------+
2 rows in set (0.00 sec)

mysql> SELECT Name AS Customers, o.Id FROM Customers AS c right JOIN Orders AS o ON c.Id = o.CustomerId ;  # 右连接
+-----------+------+
| Customers | Id   |
+-----------+------+
| Joe       |    2 |
| Sam       |    1 |
+-----------+------+
2 rows in set (0.00 sec)

mysql> SELECT Name AS Customers, o.Id FROM Customers AS c left JOIN Orders AS o ON c.Id = o.CustomerId ;   # 左连接
+-----------+------+
| Customers | Id   |
+-----------+------+
| Sam       |    1 |
| Joe       |    2 |
| Henry     | NULL |
| Max       | NULL |
+-----------+------+
4 rows in set (0.00 sec)


mysql> SELECT Name AS Customers, o.Id FROM Customers AS c left JOIN Orders AS o ON c.Id = o.CustomerId where o.ID is NULL;
+-----------+------+
| Customers | Id   |
+-----------+------+
| Henry     | NULL |
| Max       | NULL |
+-----------+------+
2 rows in set (0.00 sec)

mysql> SELECT Name AS Customers FROM Customers AS c left JOIN Orders AS o ON c.Id = o.CustomerId where o.ID is NULL;
+-----------+
| Customers |
+-----------+
| Henry     |
| Max       |
+-----------+
2 rows in set (0.00 sec)

mysql>
mysql> SELECT name,c.Id, o.CustomerId, o.Id AS Customers FROM Customers AS c left JOIN Orders AS o ON c.Id = o.CustomerId;
+-------+------+------------+-----------+
| name  | Id   | CustomerId | Customers |
+-------+------+------------+-----------+
| Sam   |    3 |          3 |         1 |
| Joe   |    1 |          1 |         2 |
| Henry |    2 |       NULL |      NULL |
| Max   |    4 |       NULL |      NULL |
+-------+------+------------+-----------+
4 rows in set (0.00 sec)

mysql> SELECT Name AS Customers FROM Customers AS c left JOIN Orders AS o ON c.Id = o.CustomerId where o.ID is NULL;
+-----------+
| Customers |
+-----------+
| Henry     |
| Max       |
+-----------+
2 rows in set (0.00 sec)

mysql>

左连接
mysql> explain SELECT Name AS Customers FROM Customers AS c left JOIN Orders AS o ON c.Id = o.CustomerId where o.ID is NULL;
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+
| id | select_type | table | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra                                              |
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+
|  1 | SIMPLE      | c     | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    4 |   100.00 | NULL                                               |
|  1 | SIMPLE      | o     | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    2 |    50.00 | Using where; Using join buffer (Block Nested Loop) |
+----+-------------+-------+------------+------+---------------+------+---------+------+------+----------+----------------------------------------------------+
2 rows in set, 1 warning (0.00 sec)

NOT IN WHERE 子查询
mysql> explain SELECT Name AS Customers FROM Customers WHERE Id NOT IN
    -> (SELECT CustomerId FROM Orders);
+----+--------------------+-----------+------------+------+---------------+------+---------+------+------+----------+-------------+
| id | select_type        | table     | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra       |
+----+--------------------+-----------+------------+------+---------------+------+---------+------+------+----------+-------------+
|  1 | PRIMARY            | Customers | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    4 |   100.00 | Using where |
|  2 | DEPENDENT SUBQUERY | Orders    | NULL       | ALL  | NULL          | NULL | NULL    | NULL |    2 |   100.00 | Using where |
+----+--------------------+-----------+------------+------+---------------+------+---------+------+------+----------+-------------+
2 rows in set, 1 warning (0.00 sec)



