create or replace FUNCTION prim(n integer) RETURN number IS
 ret_val NUMBER(1) := 1;
 v_limit NUMBER(38);
BEGIN
 IF n < 0 OR trunc(n) <> n THEN RETURN -1; END IF;
  v_limit := trunc(sqrt(n));
  FOR i IN 2..v_limit loop
  IF mod(n, i) = 0 THEN ret_val := 0; exit; END IF;
 END loop;
 RETURN ret_val;
END;
/

PRIM Compiled 

set serveroutput on
SELECT prim(26388279066623) from dual;





create or replace PROCEDURE fib(n integer) IS
 v1  integer := 0;
 v2  integer := 1;
 v_next integer;
BEGIN
  IF n <= 1 THEN v_next:=v1; ELSIF n=2 THEN v_next:=v2; END IF; 
  FOR i IN 3 .. n LOOP
    v_next := v1+v2;
    v1 := v2; v2 := v_next; 
  END LOOP;
  DBMS_OUTPUT. PUT_LINE(TO_CHAR(v_next));
END;
/

FIB Compiled 
Procedure FIB compiled
 
set serveroutput on
 execute fib(10); 
 34



CREATE FUNCTION gcd (x INTEGER, y INTEGER) RETURN INTEGER AS
-- Find greatest common divisor of x and y. For example, if
-- (8,12) is input, the greatest common divisor is 4.
-- This will be used in normalizing (simplifying) fractions.
-- (You need not try to understand how this code works, unless
--  you are a math wizard. It does.)
--
   ans INTEGER;
BEGIN
   IF (y <= x) AND (x MOD y = 0) THEN
      ans := y;
   ELSIF x < y THEN 
      ans := gcd(y, x);  -- Recursive call
   ELSE
      ans := gcd(y, x MOD y);  -- Recursive call
   END IF;
   RETURN ans;
END;
/

SELECT gcd(3570,7293) FROM dual;
51

SELECT gcd(999,99) FROM dual;
9

CREATE OR REPLACE FUNCTION Factorial(p_MyNum INTEGER)
   RETURN NUMBER AS
    BEGIN -- Start of Factorial Function
         IF p_MyNum = 1 THEN -- Checking for last value to process of n-1
           RETURN 1;
        ELSE
           RETURN(p_MyNum * Factorial(p_MyNum-1)); -- Recursive
        END IF;
    END;
  /
 
 SELECT Factorial(10) FROM dual;
 3628800
 
