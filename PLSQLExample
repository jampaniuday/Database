create or replace FUNCTION prim(n integer) RETURN number IS
 ret_val NUMBER(1) := 1;
 v_limit NUMBER(38);
BEGIN
 IF n < 0 OR trunc(n) <> n THEN RETURN -1; END IF;
  v_limit := trunc(sqrt(n));
  FOR i IN 2..v_limit loop
  IF mod(n, i) = 0 THEN ret_val := 0; exit; END IF;
 END loop;
 RETURN ret_val;
END;
/

PRIM Compiled 

set serveroutput on
SELECT prim(26388279066623) from dual;





create or replace PROCEDURE fib(n integer) IS
 v1  integer := 0;
 v2  integer := 1;
 v_next integer;
BEGIN
  IF n <= 1 THEN v_next:=v1; ELSIF n=2 THEN v_next:=v2; END IF; 
  FOR i IN 3 .. n LOOP
    v_next := v1+v2;
    v1 := v2; v2 := v_next; 
  END LOOP;
  DBMS_OUTPUT. PUT_LINE(TO_CHAR(v_next));
END;
/

FIB Compiled 
Procedure FIB compiled
 
set serveroutput on
 execute fib(10); 
 34



CREATE FUNCTION gcd (x INTEGER, y INTEGER) RETURN INTEGER AS
-- Find greatest common divisor of x and y. For example, if
-- (8,12) is input, the greatest common divisor is 4.
-- This will be used in normalizing (simplifying) fractions.
-- (You need not try to understand how this code works, unless
--  you are a math wizard. It does.)
--
   ans INTEGER;
BEGIN
   IF (y <= x) AND (x MOD y = 0) THEN
      ans := y;
   ELSIF x < y THEN 
      ans := gcd(y, x);  -- Recursive call
   ELSE
      ans := gcd(y, x MOD y);  -- Recursive call
   END IF;
   RETURN ans;
END;
/

SELECT gcd(3570,7293) FROM dual;
51

SELECT gcd(999,99) FROM dual;
9

CREATE OR REPLACE FUNCTION Factorial(p_MyNum INTEGER)
   RETURN NUMBER AS
    BEGIN -- Start of Factorial Function
         IF p_MyNum = 1 THEN -- Checking for last value to process of n-1
           RETURN 1;
        ELSE
           RETURN(p_MyNum * Factorial(p_MyNum-1)); -- Recursive
        END IF;
    END;
  /
 
 SELECT Factorial(10) FROM dual;
 3628800
 
 
CREATE TABLE emp6 AS SELECT * FROM nikovits.emp;
CREATE TABLE dept6 AS SELECT * FROM nikovits.dept;
  
  DELETE FROM emp6 WHERE comm IS NULL;
  DELETE FROM emp6 WHERE hiredate < TO_DATE('1982.01.01', 'yyyy.mm.dd');
  
  select * from emp6;

Exercises for DELETE, INSERT, UPDATE
------------------------------------

NIKOVITS.EMP (empno, ename, job, mgr, hiredate, sal, comm, deptno)
NIKOVITS.DEPT(deptno, dname, loc)
NIKOVITS.SAL_CAT(category, lowest_sal, highest_sal)

/* You should create a copy of the tables before modifying the data

CREATE TABLE emp2 AS SELECT * FROM nikovits.emp;
CREATE TABLE dept2 AS SELECT * FROM nikovits.dept;
UPDATE emp2 ...
Check the data after modification: SELECT * FROM emp2; SELECT * FROM dept2;         
Drop the modified tables: DROP TABLE emp2; DROP TABLE emp2;

*/


DELETE

-- Delete the employees whose commission is null.
DELETE FROM emp WHERE comm IS NULL;

-- Delete the employees whose hiredate is before 1982.01.01.
DELETE FROM emp WHERE hiredate < TO_DATE('1982.01.01', 'yyyy.mm.dd');

-- Delete the employees whose department's location is DALLAS.
DELETE FROM emp WHERE deptno IN 
   (SELECT deptno FROM dept WHERE loc = 'DALLAS');

-- Delete the employees whose salary is less than the average salary.
DELETE FROM emp WHERE sal < (SELECT AVG(sal) FROM emp);

-- Delete the employees whose salary is less than the average salary on his department.
DELETE FROM emp e1 WHERE sal < (SELECT AVG(sal) FROM emp WHERE deptno=e1.deptno);

-- Delete the employee (employees) whose salary is the greatest.
DELETE FROM emp WHERE sal = (SELECT MAX(sal) FROM emp);

-- Delete the departments which has an employee with salary category 2.
DELETE FROM dept WHERE EXISTS
  (SELECT * FROM emp, sal_cat 
   WHERE sal BETWEEN lowest_sal AND highest_sal AND CATEGORY=2
   AND emp.deptno=dept.deptno);

-- Delete the departments which has at least two employees with salary category 2.
DELETE FROM dept WHERE deptno IN
  (SELECT deptno FROM emp, sal_cat 
   WHERE sal BETWEEN lowest_sal AND highest_sal AND CATEGORY=2
   GROUP BY deptno
   HAVING count(distinct empno) = 2);


INSERT

-- Insert a new employee with the following values:
   empno=1, ename='Smith', deptno=10, hiredate=sysdate, salary=average salary in department 10.
   All the other columns should be NULL.
a) Insert the row with the 'VALUES' keyword
b) Insert the row with a SELECT query without 'VALUES' keyword.

a)
INSERT INTO emp(empno, ename, hiredate, sal, deptno) 
VALUES(1,'Smith', SYSDATE, (SELECT AVG(sal) FROM emp WHERE deptno=10),10);

b)
INSERT INTO emp(empno, ename, hiredate, sal, deptno) 
SELECT 1,'Smith', SYSDATE, AVG(sal), 10 FROM emp WHERE deptno=10;


UPDATE

-- Increase the salary of the employees in department 20 with 20%.
UPDATE emp SET sal = sal*1.2 WHERE deptno=20;

-- Increase the salary with 500 of the employees whose commission is NULL or whose salary is less than the average.
UPDATE emp SET sal = sal + 500 
WHERE comm IS NULL OR sal < ( SELECT AVG(sal) FROM emp);

-- Increase the commission of all employees with the maximal commission.
   If an employee has NULL commission, treat it as 0.
UPDATE emp SET comm = 
 (SELECT MAX(emp1.comm) + NVL(emp.comm,0) from emp emp1);

-- Modify the name of the employee with the lowest salary to 'Poor'.
UPDATE emp SET ename = 'Poor' 
WHERE sal = (SELECT MIN(sal) FROM emp);

-- Increase the commission with 3000 of the employees, who has at least 2 direct subordinates.
   If an employee has NULL commission, treat it as 0.
UPDATE emp SET comm=coalesce(comm,0)+3000 WHERE empno IN
  (SELECT mgr FROM emp GROUP BY mgr HAVING count(*) = 2);

-- Increase the salary of those employees who has a subordinate. The increment is the minimal salary.
UPDATE emp SET sal = sal + (SELECT min(sal) from emp) 
WHERE empno IN (SELECT mgr FROM emp);

-- Increase the salary of the employees who don't have a subordinate. The increment is
   the average salary of their own department.
UPDATE emp e1 SET sal = sal + (SELECT avg(sal) FROM emp e2 WHERE e2.deptno = e1.deptno)
WHERE empno NOT IN (SELECT coalesce(mgr,0) FROM emp);


DECLARE 
  myDate DATE;
    BEGIN
    myDate := TO_DATE('January 01, 2000','Month DD, YYYY');
    DBMS_OUTPUT.PUT_LINE(myDate);
  END;
 /
 
01-JAN-00


PL/SQL procedure successfully completed.


SELECT TO_CHAR(ADD_MONTHS(hiredate,1)),'DD-MM-YYYY' "Next month"FROM emp WHERE ename = 'SMITH'
 
SELECT REGEXP_REPLACE ('Anderson', 'a|e|i|o|u', 'G')
FROM dual;

SELECT REGEXP_COUNT ('TechOnTheNet is a great resource', 't')
FROM dual;
--2

SELECT REGEXP_COUNT ('TechOntptptptptptp', 'tp')
FROM dual;
--6

CREATE OR REPLACE FUNCTION num_times(p1 VARCHAR2, p2 VARCHAR2) RETURN integer IS

SELECT REGEXP_COUNT ('ab c ab ab de ab fg', 'ab')
FROM dual;
--4


SELECT num_times ('ab c ab ab de ab fg', 'ab') FROM dual;

select deptno,sum(sal) from NIKOVITS.emp group by deptno;
