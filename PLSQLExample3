-- SELECT data from a table into variable
set serveroutput on
DECLARE
  bonus   NUMBER(7,2);
BEGIN
  SELECT sal * 0.10 INTO bonus
  FROM emp                        -- you need table EMP !!!
  WHERE empno = 7900;
  DBMS_OUTPUT.PUT_LINE('bonus = ' || TO_CHAR(bonus));
END;
/

set serveroutput on
DECLARE
  bonus   NUMBER(7,2);
BEGIN
  SELECT sal * 0.10 INTO bonus
  FROM nikovits.emp                        -- you need table EMP !!!
  WHERE empno = 7900;
  DBMS_OUTPUT.PUT_LINE('bonus = ' || TO_CHAR(bonus));
END;
/

bonus = 95


PL/SQL procedure successfully completed.




-- CURSOR
set serveroutput on
DECLARE 
  CURSOR curs1 IS SELECT deptno, ename FROM nikovits.emp WHERE deptno = 10;
  rec curs1%ROWTYPE;
BEGIN
  OPEN curs1;
  LOOP
    FETCH curs1 INTO rec;
    EXIT WHEN curs1%NOTFOUND;
    dbms_output.put_line(to_char(rec.deptno)||' - '||rec.ename);
  END LOOP;
  CLOSE curs1;
END;
/

PL/SQL procedure successfully completed.

10 - CLARK
10 - KING
10 - MILLER


PL/SQL procedure successfully completed.


CREATE OR REPLACE FUNCTION checkForPalindrome(inputString VARCHAR2)
   RETURN VARCHAR2 
   IS result VARCHAR2(75);
   
   reversedString VARCHAR2(50); 
   BEGIN 
      SELECT REVERSE(inputString) INTO reversedString FROM DUAL;
            
      -- Using UPPER to ignore case sensitivity.
      IF UPPER(inputString) = UPPER(reversedString)
      THEN
      RETURN(inputString||' IS a palindrome.');
      END IF;
      RETURN (inputString||' IS NOT a palindrome.');
      
    END checkForPalindrome;
/

select checkForPalindrome('aba') from dual;
aba IS a palindrome.



 CREATE OR REPLACE FUNCTION fibonacci (n PLS_INTEGER) RETURN PLS_INTEGER
IS
  fib_1 PLS_INTEGER := 0;
  fib_2 PLS_INTEGER := 1;
BEGIN
  IF n = 1 THEN                              -- terminating condition
    RETURN fib_1;
  ELSIF n = 2 THEN
    RETURN fib_2;                           -- terminating condition
  ELSE
    RETURN fibonacci(n-2) + fibonacci(n-1);  -- recursive invocations
  END IF;
END;
/
BEGIN
  FOR i IN 1..10 LOOP
    DBMS_OUTPUT.PUT(fibonacci(i));
    IF i < 10 THEN
      DBMS_OUTPUT.PUT(', ');
    END IF;
  END LOOP;
 
  DBMS_OUTPUT.PUT_LINE(' ...');
END;
/

PL/SQL procedure successfully completed.

select fibonacci (10) from dual; 
--34


FIBONACCI(10)
-------------
           34

select fibonacci (30) from dual; 
--514229




CREATE OR REPLACE FUNCTION get_hire_date (emp_id NUMBER) RETURN VARCHAR
 RESULT_CACHE
IS
  date_hired DATE;
BEGIN
  SELECT hiredate INTO date_hired
    FROM nikovits.EMP
      WHERE EMPNO = emp_id;
  RETURN TO_CHAR(date_hired);
END;
/

select * FROM nikovits.EMP;
select get_hire_date(7521) from dual;
--22-FEB-81



/* SELECT ... INTO ...
Write a function which returns the average salary within a salary category (parameter).
*/
CREATE OR REPLACE FUNCTION cat_avg(categ integer) RETURN number IS
...
SELECT cat_avg(2) FROM dual;

select * FROM nikovits.Sal_cat;

CREATE OR REPLACE FUNCTION cat_avg2(categ NUMBER) RETURN number IS
avge number;
BEGIN
    SELECT (lowest_sal+highest_sal)/2 INTO avge
    FROM nikovits.Sal_cat
    WHERE CATEGORY = categ;
    RETURN TO_CHAR(avge);
END;
/

SELECT cat_avg2(2) FROM dual;

Function CAT_AVG2 compiled


CAT_AVG2(2)
-----------
     1300.5




SELECT ename, hiredate, sal, TO_CHAR((hiredate),'fmD') "Day"
FROM nikovits.emp
ORDER BY "Day";

ENAME                          HIREDATE         SAL D
------------------------------ --------- ---------- -
MARTIN                         28-SEP-81       1250 1
CLARK                          09-JUN-81       2450 2
TURNER                         08-SEP-81       1500 2
KING                           17-NOV-81       5000 2
SMITH                          17-DEC-80        800 3
ADAMS                          12-JAN-83       1100 3
JAMES                          03-DEC-81        950 4
JONES                          02-APR-81       2975 4
FORD                           03-DEC-81       3000 4
SCOTT                          09-DEC-82       3000 4
ALLEN                          20-FEB-81       1600 5
BLAKE                          01-MAY-81       4250 5
MILLER                         23-JAN-82       1300 6
WARD                           22-FEB-81       1250 7

14 rows selected. 


select deptno,avg(sal) as avg_sal_dpt from nikovits.emp group by deptno; 

    DEPTNO AVG_SAL_DPT
---------- -----------
        30        1800
        20        2175
        10  2916.66667
        
        
